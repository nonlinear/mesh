@mixin size($width: 5px, $height: 5px) {
  width:  $width;
  height: $height;
}
@mixin square($size: 5px) {
  @include size($size, $size);
}
@mixin placeholder {
  &.placeholder                { @content }
  &::-webkit-input-placeholder { @content }
  &:-moz-placeholder           { @content }
  &::-moz-placeholder          { @content }
  &:-ms-input-placeholder      { @content }
  &:focus::-webkit-input-placeholder {
    transition: all 0.5s 0.1s ease; 
    text-indent: -50%;
    opacity: 0;
  }
}
@mixin blur($blur: 10px) {
     filter: blur ($blur);
  -o-filter: blur ($blur);
  -ms-filter: blur ($blur);
  -moz-filter: blur ($blur);
  -webkit-filter: blur ($blur);
}
@mixin filter($filter: blur,$value: 10px) { 
  -webkit-filter: $filter+unquote('(#{$value})');
  -moz-filter: $filter+unquote('(#{$value})');
  -ms-filter: $filter+unquote('(#{$value})');
  -o-filter: $filter+unquote('(#{$value})');
  filter: $filter+unquote('(#{$value})');
}
@mixin box($sizing: border-box) {
  box-sizing: $sizing;
  -moz-box-sizing: $sizing;
  -webkit-box-sizing: $sizing;
}
@mixin radius($radius: 5px) {
  -webkit-border-radius: $radius;
  -moz-border-radius:    $radius;
  border-radius:         $radius;
}
@mixin radius-custom($topleft: 5px, $topright: 5px, $bottomright: 5px, $bottomleft: 5px) {
  -webkit-border-top-right-radius:    $topright;
  -webkit-border-bottom-right-radius: $bottomright;
  -webkit-border-bottom-left-radius:  $bottomleft;
  -webkit-border-top-left-radius:     $topleft;
  -moz-border-radius-topright:        $topright;
  -moz-border-radius-bottomright:     $bottomright;
  -moz-border-radius-bottomleft:      $bottomleft;
  -moz-border-radius-topleft:         $topleft;
  border-top-right-radius:            $topright;
  border-bottom-right-radius:         $bottomright;
  border-bottom-left-radius:          $bottomleft;
  border-top-left-radius:             $topleft;
  -moz-background-clip:               padding; 
  -webkit-background-clip:            padding-box; 
  background-clip:                    padding-box; 
}
@mixin shadow($shadow: 0 1px 3px rgba(0,0,0,.25), $mode: normal) {
  @if $mode == text {
    -webkit-text-shadow:  $shadow;
    -moz-text-shadow:     $shadow;
    text-shadow:          $shadow;
  } 
  @else {
    -webkit-box-shadow:  $shadow;
    -moz-box-shadow:     $shadow;
    box-shadow:          $shadow;
  }
}
@mixin opacity($opacity: 40) {
  opacity:        $opacity / 100;
  filter:         "alpha(opacity=#{$opacity})";
  -khtml-opacity: $opacity / 100;
  -moz-opacity:   $opacity / 100;
}
@mixin transition($prop: all, $time: 300ms, $ease: ease-out) {
  -webkit-transition:  $prop $time $ease;
  -moz-transition:     $prop $time $ease;
  -ms-transition:      $prop $time $ease;
  -o-transition:       $prop $time $ease;
  transition:          $prop $time $ease;
}
@mixin rotate($rotate: 0) {
  -webkit-transform: rotate($rotate +deg);
  -moz-transform:    rotate($rotate +deg);
  -ms-transform:     rotate($rotate +deg);
  -o-transform:      rotate($rotate +deg);
  transform:         rotate($rotate +deg);
}
@mixin scale($scale: 1) {
  -webkit-transform: scale($scale);
  -moz-transform:    scale($scale);
  -ms-transform:     scale($scale);
  -o-transform:      scale($scale);
  transform:         scale($scale);
}
@mixin skew($skew: 0) {
  -webkit-transform: skew($skew +deg);
  -moz-transform:    skew($skew +deg);
  -ms-transform:     skew($skew +deg);
  -o-transform:      skew($skew +deg);
  transform:         skew($skew +deg);
}
@mixin translate($left: 0, $top: 0) {
  -webkit-transform: translate($left +px, $top +px);
  -moz-transform:    translate($left +px, $top +px);
  -ms-transform:     translate($left +px, $top +px);
  -o-transform:      translate($left +px, $top +px);
  transform:         translate($left +px, $top +px);
}
@mixin mq($point, $query1: min, $query2: width) {
  @media screen and (#{$query1}-#{$query2}: $point) {
    @content;
  }
}
@mixin orient($orientation: landscape) {
  @media (orientation : $orientation) {
    @content;  
  }
}
@mixin devicewidth($minus: 0px) {
  @media screen and (max-width: $ipad-all) {
    width: ($ipad-all - $minus);
  }
  @media screen and (max-width: $ipad-portrait) {
    width: ($ipad-portrait - $minus);
  }
  @media screen and (max-width: $iphone-5) {
    width: ($iphone-5 - $minus);
  }
  @media screen and (max-width: $iphone-all) {
    width: ($iphone-all - $minus);
  }
  @media screen and (max-width: $iphone-portrait) {
    width: ($iphone-portrait - $minus);
  }
}
@mixin gradient($from: white, $to: black, $height: 100%, $pie:"false") {
  background-color: $to;
  background-image: -webkit-gradient(linear, left top, left bottom, from($from), to($to));
  background-image: -webkit-linear-gradient($from, $to);
  background-image: -moz-linear-gradient($from, $to);
  background-image: -o-linear-gradient($from, $to);
  background-image: -ms-linear-gradient($from, $to);
  background-image: linear-gradient($from, $to);
  @if $pie == "true" {
    // For CSS3PIE
    -pie-background: linear-gradient(90deg, $from,$to);
  }
  background-repeat: repeat-x;
  -webkit-background-size: 100% $height;
  -moz-background-size: 100% $height;
  -o-background-size: 100% $height;
  background-size: 100% $height;
}
@mixin grid($cell: 2, $gutter: 15px, $border: false, $border-color: #ccc) {
  width: 100%;
  @extend %border-box;
  @extend %clearfix;
        @media screen and (min-width: ($iphone-all + 1)) { 
    & > .cell, & > li, & > dt, & > section {
    float: left;
    width: (100% / $cell);

    @extend %border-box;
    &:not(:first-of-type) {
      padding-left: ($gutter / 2);
    }
    &:not(:nth-of-type(#{$cell})) {
      padding-right: ($gutter / 2);
    }
    @if $border == border {
      border-right: 1px solid $border-color;
      &:nth-of-type(#{$cell}n) {
        border-right: none;
      }
    } 
    else {
    }
  }
  }
  
}
@mixin background-opacity($color, $opacity: 0.3) {
    background: $color; /* The Fallback */
    background: rgba($color, $opacity);
}
@mixin scroll-hint($bgcolor: $c0, $bgtrans: $c0t) {
  /* from http://dabblet.com/gist/2462915 */
  overflow: auto;
  background:
  /* Shadow covers */
  linear-gradient($bgcolor 30%, $bgtrans),
  linear-gradient($bgtrans, $bgcolor 90%) 0 100%,

  /* Shadows */
  radial-gradient(50% 0, farthest-side, rgba(0,0,0,.2), rgba(0,0,0,0)),
  radial-gradient(50% 100%,farthest-side, rgba(0,0,0,.2), rgba(0,0,0,0)) 0 100%;
  background:
  /* Shadow covers */
  linear-gradient($bgcolor 30%, $bgtrans),
  linear-gradient($bgtrans, $bgcolor 90%) 0 100%,

  /* Shadows */
  radial-gradient(farthest-side at 50% 0, rgba(0,0,0,.5), rgba(0,0,0,0)),
  radial-gradient(farthest-side at 50% 100%, rgba(0,0,0,.5), rgba(0,0,0,0)) 0 100%;
  background-repeat: no-repeat;
  background-color: $bgcolor;
  background-size: 100% 40px, 100% 40px, 100% 14px, 100% 14px;
  
  /* Opera doesn't support this in the shorthand */
  background-attachment: local, local, scroll, scroll;
}
@mixin arrow(
  $direction: left,
  $position: ($avatar_mini / 2), 
  $color: $c1l2, 
  $bgcolor: $c0, 
  $size: 7px, 
  $border: 1px) {
  position: relative;
  @if $direction == left {
    border-left: $border solid $color;
  } 
  @else if $direction == right {
    border-right: $border solid $color;
  } 
  @else if $direction == top {
    border-top: $border solid $color;
  } 
  @else if $direction == bottom {
    border-bottom: $border solid $color;
  } 
  &:after, &:before {
    @if $direction == left {
      right: 100%;
      top: $position;
    } 
    @else if $direction == right {
      left: 100%;
      top: $position;
    } 
    @else if $direction == top {
      bottom: 100%;
      left: $position;
    } 
    @else if $direction == bottom {
      top: 100%;
      left: $position;
    } 
    border: solid transparent;
    content: " ";
    height: 0;
    width: 0;
    position: absolute;
    pointer-events: none;
  }
  &:after {
    border-width: $size;
    @if $direction == left {
      border-right-color: $bgcolor;
    margin-top: ($size * -1);
    } 
    @else if $direction == right {
      border-left-color: $bgcolor;
    margin-top: ($size * -1);
    } 
    @else if $direction == top {
      border-bottom-color: $bgcolor;
    margin-left: ($size * -1);
    } 
    @else if $direction == bottom {
      border-top-color: $bgcolor;
    margin-left: ($size * -1);
    } 
  }
  &:before {
    border-width: ($size + $border);
    @if $direction == left {
      border-right-color: $color;
      margin-top: (($size + $border) * -1);
    } 
    @else if $direction == right {
      border-left-color: $color;
      margin-top: (($size + $border) * -1);
    } 
    @else if $direction == top {
      border-bottom-color: $color;
      margin-left: (($size + $border) * -1);
    } 
    @else if $direction == bottom {
      border-top-color: $color;
      margin-left: (($size + $border) * -1);
    } 
    
    
  }
}

@mixin reset($margin: true, $padding: true, $border: true, $bg: true) {
  @if $margin == true {
    margin:       0px !important;
  } 
  @else {
  }
  @if $padding == true {
    padding:       0px !important;
  } 
  @else {
  }
  @if $border == true {
    border:       none;
  } 
  @else {
  }
  @if $bg == true {
    background:   transparent;
  } 
  @else {
  }
}
/*
from 
http://codepen.io/chriscoyier/blog/some-mini-sass-mixins-i-like
*/
@mixin coverer {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
}
@mixin centerer {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
}
@mixin word-wrap() {
  word-break:     break-word;
  -webkit-hyphens: auto;
  -moz-hyphens:    auto;
  hyphens:         auto;
}
@mixin ellipsis() {
  overflow: hidden;
  white-space: nowrap;
  text-overflow: ellipsis;
}
@function black($opacity) {
  @return rgba(black, $opacity)
}
@function white($opacity) {
  @return rgba(white, $opacity)
}